{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/Footer.js","App.js","index.js"],"names":["Header","state","title","handleSubmit","event","addNewTodo","_this","props","preventDefault","completed","id","Date","now","setState","handleChange","value","target","react_default","a","createElement","className","onSubmit","this","placeholder","onChange","React","Component","TodoItem","isEditable","currentValue","todo","changeEditMode","prevState","changeEditModeByKey","key","_this$props","onCheck","onRemove","_this$state","classnames","editing","autoFocus","ref","inputRef","onKeyPress","onBlur","type","checked","onDoubleClick","onClick","TodoList","_ref","todos","onToggle","style","display","htmlFor","map","components_TodoItem","TodosFilter","selectedFilter","handleFilter","href","selected","name","Footer","handleRemoveCompleted","activeTodos","filter","length","completedTodos","concat","components_TodosFilter","Fragment","App","Object","toConsumableArray","handleToggle","objectSpread","handleToggleAll","every","filterTodos","handleRemove","visibleTodos","components_Header","components_TodoList","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cbf5d5b5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleSubmit = (event) => {\n    const { addNewTodo } = this.props;\n\n    event.preventDefault();\n\n    addNewTodo({\n      title: this.state.title,\n      completed: false,\n      id: Date.now(),\n    });\n\n    this.setState({\n      title: '',\n    });\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n    });\n  };\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={this.state.title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEditable: false,\n    currentValue: this.props.todo.title,\n  };\n\n  changeEditMode = () => {\n    this.setState(prevState => ({\n      isEditable: !prevState.isEditable,\n    }));\n  }\n\n  changeEditModeByKey = (event) => {\n    if (event.key === 'Enter') {\n      this.setState(prevState => ({\n        isEditable: false,\n      }));\n    }\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      currentValue: value,\n    });\n  }\n\n  render() {\n    const { todo, onCheck, onRemove } = this.props;\n    const { isEditable, currentValue } = this.state;\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: isEditable,\n      })}\n      >\n        { isEditable\n          ? (\n            <input\n              className=\"edit\"\n              value={currentValue}\n              /* eslint-disable-next-line */\n              autoFocus\n              ref={this.inputRef}\n              onChange={this.handleChange}\n              onKeyPress={this.changeEditModeByKey}\n              onBlur={this.changeEditMode}\n            />\n          ) : (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                onChange={() => onCheck(todo.id)}\n                checked={todo.completed}\n              />\n              {/* eslint-disable-next-line */}\n              <label onDoubleClick={this.changeEditMode}>\n                {currentValue}\n              </label>\n\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => onRemove(todo.id)}\n              />\n            </div>\n          )\n        }\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  onCheck,\n  todos,\n  onRemove,\n  onToggle,\n}) => (\n  <section className=\"main\" style={{ display: 'block' }}>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onClick={onToggle}\n    />\n    {/* eslint-disable-next-line */}\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          onCheck={onCheck}\n          onRemove={onRemove}\n          key={todo.id}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ selectedFilter, handleFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classnames({\n          selected: selectedFilter === 'all',\n        })}\n        name=\"all\"\n        onClick={handleFilter}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classnames({\n          selected: selectedFilter === 'active',\n        })}\n        name=\"active\"\n        onClick={handleFilter}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classnames({\n          selected: selectedFilter === 'completed',\n        })}\n        name=\"completed\"\n        onClick={handleFilter}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  selectedFilter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodosFilter from './TodosFilter';\n\nconst Footer = ({\n  todos,\n  selectedFilter,\n  handleFilter,\n  handleRemoveCompleted,\n}) => {\n  const activeTodos = todos.filter(todo => (!todo.completed)).length;\n  const completedTodos = todos.filter(todo => (todo.completed)).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n      <span className=\"todo-count\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <TodosFilter\n        selectedFilter={selectedFilter}\n        handleFilter={handleFilter}\n      />\n\n      {completedTodos > 0\n        ? (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            style={{ display: 'block' }}\n            onClick={handleRemoveCompleted}\n          >\n            Clear completed\n          </button>\n        ) : (\n          <></>\n        )\n      }\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  handleRemoveCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state= {\n    todos: [],\n    selectedFilter: 'all',\n  };\n\n  addNewTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  handleToggle = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      )),\n    }));\n  };\n\n  handleToggleAll = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: !todo.completed,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  handleFilter = (event) => {\n    const { name } = event.target;\n\n    this.setState({ selectedFilter: name });\n  };\n\n  filterTodos = (selectedFilter) => {\n    const { todos } = this.state;\n\n    if (selectedFilter === 'active') {\n      return todos.filter(todo => todo.completed === false);\n    }\n\n    if (selectedFilter === 'completed') {\n      return todos.filter(todo => todo.completed === true);\n    }\n\n    return todos;\n  }\n\n  handleRemove = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  handleRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  render() {\n    const {\n      selectedFilter,\n    } = this.state;\n\n    const visibleTodos = this.filterTodos(selectedFilter);\n\n    return (\n      <section className=\"todoapp\">\n        <Header addNewTodo={this.addNewTodo} />\n\n        <TodoList\n          onCheck={this.handleToggle}\n          onRemove={this.handleRemove}\n          todos={visibleTodos}\n          onToggle={this.handleToggleAll}\n        />\n\n        { (visibleTodos.length > 0 || selectedFilter !== 'all')\n          ? (\n            <Footer\n              todos={visibleTodos}\n              selectedFilter={selectedFilter}\n              handleFilter={this.handleFilter}\n              handleRemoveCompleted={this.handleRemoveCompleted}\n            />\n          ) : (\n            <></>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}