{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/Footer.js","App.js","index.js"],"names":["Header","state","title","error","handleSubmit","event","addNewTodo","_this","props","preventDefault","setState","prevState","completed","id","Date","now","handleChange","value","target","replace","this","react_default","a","createElement","className","onSubmit","placeholder","onChange","React","Component","TodoItem","isEditable","currentValue","todo","changeEditMode","editableValue","changeEditModeByKey","key","_this$props","onCheck","onRemove","_this$state","classnames","editing","autoFocus","ref","inputRef","onKeyPress","onBlur","type","checked","onDoubleClick","onClick","TodoList","_ref","todos","onToggle","style","display","htmlFor","map","components_TodoItem","TodosFilter","selectedFilter","handleFilter","name","text","filterButton","react_router_dom","to","concat","selected","Footer","handleRemoveCompleted","activeTodos","filter","length","completedTodos","components_TodosFilter","App","Object","toConsumableArray","handleToggle","objectSpread","handleToggleAll","every","filterTodos","handleRemove","localStorage","getItem","JSON","parse","setItem","stringify","visibleTodos","react_router","path","exact","components_Header","components_TodoList","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fb0dbe75.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state = {\n    title: '',\n    error: '',\n  }\n\n  handleSubmit = (event) => {\n    const { addNewTodo } = this.props;\n    let { error } = this.state;\n\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (!prevState.title || prevState.title === ' ') {\n        error = 'Todo is required';\n      }\n\n      if (error) {\n        return error;\n      }\n\n      addNewTodo({\n        title: prevState.title,\n        completed: false,\n        id: Date.now(),\n      });\n\n      return {};\n    });\n\n    this.setState({\n      title: '',\n    });\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value.replace(/[^\\w ]/, '').replace(/\\s+/g, ' '),\n      error: '',\n    });\n  };\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEditable: false,\n    currentValue: this.props.todo.title,\n  };\n\n  changeEditMode = () => {\n    let editableValue = this.state.currentValue;\n\n    if (!editableValue || editableValue === ' ') {\n      editableValue = this.props.todo.title;\n    }\n\n    this.setState(prevState => ({\n      isEditable: !prevState.isEditable,\n      currentValue: editableValue,\n    }));\n  }\n\n  changeEditModeByKey = (event) => {\n    const { currentValue } = this.state;\n    let { isEditable } = this.state;\n\n    if ((!currentValue || currentValue === ' ') && event.key === 'Enter') {\n      isEditable = true;\n\n      return isEditable;\n    }\n\n    if (event.key === 'Enter') {\n      this.setState({\n        isEditable: false,\n      });\n    }\n\n    return {};\n  }\n\n  handleChange = (event) => {\n    let { value } = event.target;\n\n    value = value.replace(/[^\\w ]/, '').replace(/\\s+/g, ' ');\n\n    this.setState({ currentValue: value });\n  }\n\n  render() {\n    const { todo, onCheck, onRemove } = this.props;\n    const { isEditable, currentValue } = this.state;\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: isEditable,\n      })}\n      >\n        { isEditable\n          ? (\n            <input\n              className=\"edit\"\n              value={currentValue}\n              /* eslint-disable-next-line */\n              autoFocus\n              ref={this.inputRef}\n              onChange={this.handleChange}\n              onKeyPress={this.changeEditModeByKey}\n              onBlur={this.changeEditMode}\n              placeholder=\"Please, enter todo\"\n            />\n          ) : (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                onChange={() => onCheck(todo.id)}\n                checked={todo.completed}\n              />\n              {/* eslint-disable-next-line */}\n              <label onDoubleClick={this.changeEditMode}>\n                {currentValue}\n              </label>\n\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => onRemove(todo.id)}\n              />\n            </div>\n          )\n        }\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  onCheck,\n  todos,\n  onRemove,\n  onToggle,\n}) => (\n  <section className=\"main\" style={{ display: 'block' }}>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onClick={onToggle}\n    />\n    {/* eslint-disable-next-line */}\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          onCheck={onCheck}\n          onRemove={onRemove}\n          key={todo.id}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nconst TodosFilter = ({ selectedFilter, handleFilter }) => {\n  const filterButtons = [\n    { name: 'all', text: 'All' },\n    { name: 'active', text: 'Active' },\n    { name: 'completed', text: 'Completed' },\n  ];\n\n  return (\n    <ul className=\"filters\">\n      {filterButtons.map(filterButton => (\n        <li key={filterButton.name}>\n          <NavLink\n            to={`/${filterButton.name === 'all'\n              ? ''\n              : filterButton.name\n            }`}\n            className={classnames({\n              selected: selectedFilter === filterButton.name,\n            })}\n            name={filterButton.name}\n            onClick={handleFilter}\n          >\n            {filterButton.text}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  selectedFilter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodosFilter from './TodosFilter';\n\nconst Footer = ({\n  todos,\n  selectedFilter,\n  handleFilter,\n  handleRemoveCompleted,\n}) => {\n  const activeTodos = todos.filter(todo => (!todo.completed)).length;\n  const completedTodos = todos.filter(todo => (todo.completed)).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n      <span className=\"todo-count\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <TodosFilter\n        selectedFilter={selectedFilter}\n        handleFilter={handleFilter}\n      />\n\n      {completedTodos > 0\n        ? (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            style={{ display: 'block' }}\n            onClick={handleRemoveCompleted}\n          >\n            Clear completed\n          </button>\n        ) : (\n          null\n        )\n      }\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  handleRemoveCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state= {\n    todos: [],\n    selectedFilter: 'all',\n  };\n\n  componentWillMount() {\n    if (localStorage.getItem('todos')) {\n      this.setState({\n        todos: JSON.parse(localStorage.getItem('todos')),\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  }\n\n  addNewTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  handleToggle = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      )),\n    }));\n  };\n\n  handleToggleAll = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: !todo.completed,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  handleFilter = (event) => {\n    const { name } = event.target;\n\n    this.setState({ selectedFilter: name });\n  };\n\n  filterTodos = (selectedFilter) => {\n    const { todos } = this.state;\n\n    if (selectedFilter === 'active') {\n      return todos.filter(todo => todo.completed === false);\n    }\n\n    if (selectedFilter === 'completed') {\n      return todos.filter(todo => todo.completed === true);\n    }\n\n    return todos;\n  }\n\n  handleRemove = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  handleRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  render() {\n    const {\n      selectedFilter,\n    } = this.state;\n\n    const visibleTodos = this.filterTodos(selectedFilter);\n\n    return (\n      <Route path=\"/:selectedFilter?\" exact>\n        <section className=\"todoapp\">\n          <Header addNewTodo={this.addNewTodo} />\n\n          <TodoList\n            onCheck={this.handleToggle}\n            onRemove={this.handleRemove}\n            todos={visibleTodos}\n            onToggle={this.handleToggleAll}\n          />\n\n          { (visibleTodos.length > 0 || selectedFilter !== 'all')\n            ? (\n              <Footer\n                todos={visibleTodos}\n                selectedFilter={selectedFilter}\n                handleFilter={this.handleFilter}\n                handleRemoveCompleted={this.handleRemoveCompleted}\n              />\n            ) : (\n              null\n            )\n          }\n        </section>\n      </Route>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}