{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/Footer.js","App.js","index.js"],"names":["Header","state","title","handleSubmit","event","addNewTodo","_this","props","preventDefault","setState","prevState","completed","id","Date","now","handleChange","value","target","react_default","a","createElement","className","onSubmit","this","placeholder","onChange","React","Component","TodoItem","isEditable","currentValue","todo","changeEditMode","changeEditModeByKey","key","_this$props","onCheck","onRemove","_this$state","classnames","editing","autoFocus","ref","inputRef","onKeyPress","onBlur","type","checked","onDoubleClick","onClick","TodoList","_ref","todos","onToggle","style","display","htmlFor","map","components_TodoItem","TodosFilter","selectedFilter","handleFilter","href","selected","name","Footer","handleRemoveCompleted","activeTodos","filter","length","completedTodos","concat","components_TodosFilter","Fragment","App","Object","toConsumableArray","handleToggle","objectSpread","handleToggleAll","every","filterTodos","handleRemove","splice","visibleTodos","components_Header","components_TodoList","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fbaa2af6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleSubmit = (event) => {\n    const { addNewTodo } = this.props;\n\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      addNewTodo({\n        title: prevState.title,\n        completed: false,\n        id: Date.now(),\n      });\n\n      return {\n        title: '',\n      };\n    });\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n    });\n  };\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChange}\n            value={this.state.title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEditable: false,\n    currentValue: this.props.todo.title,\n  };\n\n  changeEditMode = () => {\n    this.setState(prevState => ({\n      isEditable: !prevState.isEditable,\n    }));\n  }\n\n  changeEditModeByKey = (event) => {\n    if (event.key === 'Enter') {\n      this.setState(prevState => ({\n        isEditable: false,\n      }));\n    }\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      currentValue: value,\n    });\n  }\n\n  render() {\n    const { todo, onCheck, onRemove } = this.props;\n    const { isEditable, currentValue } = this.state;\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: isEditable,\n      })}\n      >\n        { isEditable\n          ? (\n            <input\n              className=\"edit\"\n              value={currentValue}\n              /* eslint-disable-next-line */\n              autoFocus\n              ref={this.inputRef}\n              onChange={this.handleChange}\n              onKeyPress={this.changeEditModeByKey}\n              onBlur={this.changeEditMode}\n            />\n          ) : (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                onChange={() => onCheck(todo.id)}\n                checked={todo.completed}\n              />\n              {/* eslint-disable-next-line */}\n              <label onDoubleClick={this.changeEditMode}>\n                {currentValue}\n              </label>\n\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => onRemove(todo)}\n              />\n            </div>\n          )\n        }\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  onCheck,\n  todos,\n  onRemove,\n  onToggle,\n}) => (\n  <section className=\"main\" style={{ display: 'block' }}>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onClick={onToggle}\n    />\n    {/* eslint-disable-next-line */}\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          onCheck={onCheck}\n          onRemove={onRemove}\n          key={todo.id}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ selectedFilter, handleFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classnames({\n          selected: selectedFilter === 'all',\n        })}\n        name=\"all\"\n        onClick={handleFilter}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classnames({\n          selected: selectedFilter === 'active',\n        })}\n        name=\"active\"\n        onClick={handleFilter}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classnames({\n          selected: selectedFilter === 'completed',\n        })}\n        name=\"completed\"\n        onClick={handleFilter}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  selectedFilter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodosFilter from './TodosFilter';\n\nconst Footer = ({\n  todos,\n  selectedFilter,\n  handleFilter,\n  handleRemoveCompleted,\n}) => {\n  const activeTodos = todos.filter(todo => (!todo.completed)).length;\n  const completedTodos = todos.filter(todo => (todo.completed)).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n      <span className=\"todo-count\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <TodosFilter\n        selectedFilter={selectedFilter}\n        handleFilter={handleFilter}\n      />\n\n      {completedTodos > 0\n        ? (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            style={{ display: 'block' }}\n            onClick={handleRemoveCompleted}\n          >\n            Clear completed\n          </button>\n        ) : (\n          <></>\n        )\n      }\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  handleRemoveCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state= {\n    todos: [],\n    selectedFilter: 'all',\n  };\n\n  addNewTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  handleToggle = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  handleToggleAll = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: !todo.completed,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  handleFilter = (event) => {\n    const { name } = event.target;\n\n    this.setState({ selectedFilter: name });\n  };\n\n  filterTodos = (selectedFilter) => {\n    const { todos } = this.state;\n\n    if (selectedFilter === 'active') {\n      return todos.filter(todo => todo.completed === false);\n    }\n\n    if (selectedFilter === 'completed') {\n      return todos.filter(todo => todo.completed === true);\n    }\n\n    return todos;\n  }\n\n  handleRemove = (todo) => {\n    this.setState((prevState) => {\n      prevState.todos.splice(todo, 1);\n\n      return {\n        todos: prevState.todos,\n      };\n    });\n  };\n\n  handleRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  render() {\n    const {\n      selectedFilter,\n    } = this.state;\n\n    const visibleTodos = this.filterTodos(selectedFilter);\n\n    return (\n      <section className=\"todoapp\">\n        <Header addNewTodo={this.addNewTodo} />\n\n        <TodoList\n          onCheck={this.handleToggle}\n          onRemove={this.handleRemove}\n          todos={visibleTodos}\n          onToggle={this.handleToggleAll}\n        />\n\n        { (visibleTodos.length > 0 || selectedFilter !== 'all')\n          ? (\n            <Footer\n              todos={visibleTodos}\n              selectedFilter={selectedFilter}\n              handleFilter={this.handleFilter}\n              handleRemoveCompleted={this.handleRemoveCompleted}\n            />\n          ) : (\n            <></>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}